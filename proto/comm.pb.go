// Code generated by protoc-gen-go.
// source: comm.proto
// DO NOT EDIT!

/*
Package comm is a generated protocol buffer package.

It is generated from these files:
	comm.proto

It has these top-level messages:
	Id
	Command
*/
package comm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Id struct {
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Command struct {
	Cmd  string `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Arg1 string `protobuf:"bytes,2,opt,name=arg1" json:"arg1,omitempty"`
	Arg2 string `protobuf:"bytes,3,opt,name=arg2" json:"arg2,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Command) GetArg1() string {
	if m != nil {
		return m.Arg1
	}
	return ""
}

func (m *Command) GetArg2() string {
	if m != nil {
		return m.Arg2
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "comm.id")
	proto.RegisterType((*Command)(nil), "comm.Command")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommSvc service

type CommSvcClient interface {
	GetCmd(ctx context.Context, in *Id, opts ...grpc.CallOption) (CommSvc_GetCmdClient, error)
}

type commSvcClient struct {
	cc *grpc.ClientConn
}

func NewCommSvcClient(cc *grpc.ClientConn) CommSvcClient {
	return &commSvcClient{cc}
}

func (c *commSvcClient) GetCmd(ctx context.Context, in *Id, opts ...grpc.CallOption) (CommSvc_GetCmdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CommSvc_serviceDesc.Streams[0], c.cc, "/comm.CommSvc/GetCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &commSvcGetCmdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommSvc_GetCmdClient interface {
	Recv() (*Command, error)
	grpc.ClientStream
}

type commSvcGetCmdClient struct {
	grpc.ClientStream
}

func (x *commSvcGetCmdClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CommSvc service

type CommSvcServer interface {
	GetCmd(*Id, CommSvc_GetCmdServer) error
}

func RegisterCommSvcServer(s *grpc.Server, srv CommSvcServer) {
	s.RegisterService(&_CommSvc_serviceDesc, srv)
}

func _CommSvc_GetCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Id)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommSvcServer).GetCmd(m, &commSvcGetCmdServer{stream})
}

type CommSvc_GetCmdServer interface {
	Send(*Command) error
	grpc.ServerStream
}

type commSvcGetCmdServer struct {
	grpc.ServerStream
}

func (x *commSvcGetCmdServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

var _CommSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.CommSvc",
	HandlerType: (*CommSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCmd",
			Handler:       _CommSvc_GetCmd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comm.proto",
}

func init() { proto.RegisterFile("comm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0xcf, 0xcd,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x58, 0xb8, 0x98, 0x32, 0x53,
	0x94, 0x9c, 0xb9, 0xd8, 0x9d, 0xf3, 0x73, 0x73, 0x13, 0xf3, 0x52, 0x84, 0x04, 0xb8, 0x98, 0x93,
	0x73, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x21, 0x2e, 0x96, 0xc4,
	0xa2, 0x74, 0x43, 0x09, 0x26, 0xb0, 0x10, 0x98, 0x0d, 0x15, 0x33, 0x92, 0x60, 0x86, 0x8b, 0x19,
	0x19, 0xe9, 0x41, 0x0c, 0x09, 0x2e, 0x4b, 0x16, 0x52, 0xe6, 0x62, 0x73, 0x4f, 0x2d, 0x71, 0xce,
	0x4d, 0x11, 0xe2, 0xd0, 0x03, 0x5b, 0x99, 0x99, 0x22, 0xc5, 0x0b, 0x61, 0x41, 0xed, 0x31, 0x60,
	0x4c, 0x62, 0x03, 0xbb, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x20, 0xf7, 0xc8, 0x95,
	0x00, 0x00, 0x00,
}
